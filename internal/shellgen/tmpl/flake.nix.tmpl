{
   description = "A devbox shell";

   inputs = {
     nixpkgs.url = "{{ .NixpkgsInfo.URL }}";

     {{- range .FlakeInputs }}
     {{.Name}}.url = "{{.URLWithCaching}}";
     {{- end }}
   };

   outputs = {
     self,
     nixpkgs,
     {{- range .FlakeInputs }}
     {{.Name}},
     {{- end }}
   }:
      let
        pkgs = nixpkgs.legacyPackages.{{ .System }};
        {{- range $_, $flake := .FlakeInputs }}
        {{- if .IsNixpkgs }}
        {{.PkgImportName}} = (import {{.Name}} {
          system = "{{ $.System }}";
          config.allowUnfree = true;
          config.permittedInsecurePackages = [
            {{- range $flake.Packages }}
            {{- range .AllowInsecure }}
            "{{ . }}"
            {{- end }}
            {{- end }}
          ];
        });
        {{- end }}
        {{- end }}
      in
      {
        devShells.{{ .System }}.default = pkgs.mkShell {
          buildInputs = [
            {{- range $_, $pkg := .Packages }}
            {{- range $_, $output := $pkg.GetOutputsWithCache }}
            {{ if $output.CacheURI -}}
            (builtins.trace "downloading {{ $pkg.Versioned }}" (builtins.fetchClosure {
              {{/*  
                HACK HACK HACK! fetchClosure only supports http(s) caches and not
                s3 caches. Until we implement that, we put a fake store here.
                Since we pre-build everything, fetchClosure will not actually
                fetch anything and just use the local version. This may break
                if user somehow removes the local store path.
              */}}
              fromStore = "https://cache.nixos.org";
              fromPath = "{{ $pkg.InputAddressedPathForOutput $output.Name }}";
              inputAddressed = true;
            }))
            {{- end }}
            {{- end }}
            {{- end }}
            {{- range $_, $flakeInput := .FlakeInputs }}
            {{- range .BuildInputsForSymlinkJoin }}
            (pkgs.symlinkJoin {
              name = "{{.Name}}";
              paths = [
                {{- range .Paths }}
                (builtins.trace "evaluating {{.}}" {{.}})
                {{- end }}
              ];
            })
            {{- end }}
            {{- range .BuildInputs }}
            (builtins.trace "evaluating {{.}}" {{.}})
            {{- end }}
            {{- end }}
          ];
        };
      };
 }
