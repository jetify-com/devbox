name: cli-tests
# Runs the Devbox CLI tests

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
  push:
    branches:
      - main
  merge_group:
    branches:
      - main
  workflow_call:
    inputs:
      run-mac-tests:
        type: boolean
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

env:
  HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}"
  HOMEBREW_NO_ANALYTICS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_EMOJI: 1
  HOMEBREW_NO_ENV_HINTS: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1

jobs:
  golangci-lint:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.5.0
        with:
          go-version-file: ./go.mod
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
      - name: Mount golangci-lint cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/golangci-lint
            ~/.cache/go-build
            ~/go/pkg
          key: golangci-lint-cache-${{ runner.os }}-${{ steps.current-time.outputs.day }}
          restore-keys: |
            golangci-lint-cache-${{ runner.os }}-
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3.4.0
        with:
          args: "--out-${NO_FUTURE}format colored-line-number --timeout=10m"
          skip-cache: true

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        exclude:
          # This expression basically says run mac tests if on main branch or
          # if this job is triggered by another workflow with "with: run-mac-tests: true"
          - os: ${{ (github.ref == 'refs/heads/main' || inputs.run-mac-tests) && 'dummy' || 'macos-latest' }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ (github.ref == 'refs/heads/main' || inputs.run-mac-tests) && 20 || 10 }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.5.0
        with:
          go-version-file: ./go.mod
          cache: true
      - name: Build devbox
        run: go install ./cmd/devbox
      - name: Install additional shells (dash, zsh)
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install dash zsh
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew update
            brew install dash zsh
          fi
      - name: Install Nix
        run: |
          sh <(curl -L https://nixos.org/nix/install) --no-modify-profile --daemon --daemon-user-count 1
          . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
          export NIX_PATH=nixpkgs=https://github.com/nixos/nixpkgs/tarball/nixos-unstable
          nix-build '<nixpkgs>' -A stdenv -A bash -A hello
          echo "__ETC_PROFILE_NIX_SOURCED=1" >> $GITHUB_ENV
          echo "NIX_PROFILES=$NIX_PROFILES" >> $GITHUB_ENV
          echo "NIX_SSL_CERT_FILE=$NIX_SSL_CERT_FILE" >> $GITHUB_ENV
          echo "NIX_PATH=$NIX_PATH" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV
      - name: Run tests
        run: |
          export NIX_PATH=nixpkgs=https://github.com/nixos/nixpkgs/tarball/nixos-unstable
          go test -race -cover -v ./...

  auto-nix-install: # ensure Devbox installs nix and works properly after installation.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.5.0
        with:
          go-version-file: ./go.mod
          cache: true
      - name: Build devbox
        run: go install ./cmd/devbox
      - name: Install nix and devbox packages
        run: |
          NIX_INSTALLER_NO_CHANNEL_ADD=1
          devbox run echo "Installing packages..."
