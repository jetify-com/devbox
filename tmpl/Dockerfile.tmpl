# syntax=docker/dockerfile:1

# BASE IMAGE
FROM nixos/nix:2.10.3 as base
WORKDIR /scratch
# Setup shell so that we catch any errors early
SHELL [ "/bin/sh", "-eux", "-o", "pipefail", "-c"]
# Install runtime packages and copy them to /runtime
COPY --link ./.devbox/gen/runtime.nix ./.devbox/gen/
RUN mkdir -p /runtime/store && \
  nix-env --profile /runtime/profile -if ./.devbox/gen/runtime.nix && \
  cp -va $(nix-store -qR /runtime/profile) /runtime/store

# BUILDER IMAGE
FROM base as builder

# 1. SETUP STAGE
#    Setup the container, and install nix packages.
# -------------------------------------------------

# Setup nix in its own layer so it can be cached.
COPY --link ./.devbox/gen/development.nix ./.devbox/gen/
# Setup /nix/store as a cache directory.
# Declaring it as a cache directory makes it empty directory, so we need to
# specify, using from= and source=, that we want to re-copy the contents of
# the directory from nixos/nix.
RUN --mount=type=cache,target=/nix/store,from=base,source=/nix/store \
  nix-env -if ./.devbox/gen/development.nix

# 2. INSTALL STAGE
#    Install libraries needed by the source code.
# -----------------------------------------------
{{ if .InstallStage }}
  {{ if .InstallStage.InputFiles }}{{ range $i, $files := .InstallStage.InputFiles }}
COPY --link {{ $files }} ./
RUN true
  {{- end }}{{- end }}
RUN --mount=type=cache,target=/nix/store,from=base,source=/nix/store {{.InstallStage.Command}}
{{- end }}

# 3. BUILD STAGE
#    Compile the source code into an executable.
# ----------------------------------------------
{{ if .BuildStage }}
  {{ if .BuildStage.InputFiles }}{{ range $i, $files := .BuildStage.InputFiles }}
COPY --link {{ $files }} ./
RUN true
  {{- end }}{{- end }}
RUN --mount=type=cache,target=/nix/store,from=base,source=/nix/store {{.BuildStage.Command}}
{{- end }}


# 4. PACKAGING STAGE
#    Create a minimal image that contains the executable.
# -------------------------------------------------------
# FINAL APP IMAGE
# This is the final image with the application. We're trying to keep it very small
# so we copy only the application + any runtime dependencies it might have.
# Development dependencies are *not* copied over.

# Default to :debug so we have a shell.
FROM gcr.io/distroless/base:debug
# Setup shell so that we catch any errors early
SHELL [ "/busybox/sh", "-eu", "-o", "pipefail", "-c"]
# Populate /bin and /usr/bin with symlinks to busybox
RUN cp -rs /busybox/. /bin/ && cp -rs /busybox/. /usr/bin/

# Copy over the nix store that contains our runtime dependencies.
COPY --link --from=base /runtime/store/. /nix/store/
# https://github.com/moby/moby/issues/37965
RUN true
COPY --link --from=base /runtime/profile/. /usr/local/
RUN true

WORKDIR /app
# 4. START STAGE
#    Execute the application inside the final container.
# ------------------------------------------------------
{{ if .StartStage }}
  {{ if .StartStage.InputFiles }}{{ range $i, $files := .StartStage.InputFiles }}
COPY --link --from=builder /scratch/{{ $files }} ./
RUN true
  {{- end }}{{- end }}
# We default to ENTRYPOINT instead of CMD as we consider it best practice
# when the container is wrapping an application or service.
ENTRYPOINT {{.StartStage.Command}}
{{- end }}
