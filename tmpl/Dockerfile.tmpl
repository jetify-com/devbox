# syntax=docker/dockerfile:1

FROM nixos/nix:2.10.3 as base

FROM base as builder

# 1. SETUP STAGE
#    Setup the container, and install nix packages.
# -------------------------------------------------

# Setup shell so that we catch any errors early
SHELL [ "/bin/sh", "-eux", "-o", "pipefail", "-c"]
WORKDIR /scratch

# Setup nix in its own layer so it can be cached.
COPY --link ./.devbox/gen/default.nix ./.devbox/gen/
# Setup /nix/store as a cache directory.
# Declaring it as a cache directory makes it empty directory, so we need to
# specify, using from= and source=, that we want to re-copy the contents of
# the directory from nixos/nix.
RUN --mount=type=cache,target=/nix/store,from=base,source=/nix/store \
  nix-env -if ./.devbox/gen/default.nix

# 2. INSTALL STAGE
#    Install libraries needed by the source code.
# -----------------------------------------------

COPY --link . ./
{{ if .InstallStage }}
RUN --mount=type=cache,target=/nix/store,from=base,source=/nix/store {{.InstallStage.Command}}
{{- end }}

# 3. BUILD STAGE
#    Compile the source code into an executable.
# ----------------------------------------------
{{ if .BuildStage }}
RUN --mount=type=cache,target=/nix/store,from=base,source=/nix/store {{.BuildStage.Command}}
{{- end }}

# 4. PACKAGING STAGE
#    Create a minimal image that contains the executable.
# -------------------------------------------------------

{{ if contains .StartStage.Image "debug" -}}
# Default to :debug so we have a shell.
{{ end -}}
FROM {{ .StartStage.Image }}

{{ if contains .StartStage.Image "distroless" -}}
# Setup shell so that we catch any errors early
SHELL [ "/busybox/sh", "-eu", "-o", "pipefail", "-c"]
{{- end -}}

# TODO: Improve to only copy needed files and not the entire src directory.
COPY --link --from=builder /scratch/. /app/
WORKDIR /app

# 4. START STAGE
#    Execute the application inside the final container.
# ------------------------------------------------------

# We default to ENTRYPOINT instead of CMD as we consider it best practice
# when the container is wrapping an application or service.
{{ if .StartStage }}
ENTRYPOINT {{.StartStage.Command}}
{{- end }}
